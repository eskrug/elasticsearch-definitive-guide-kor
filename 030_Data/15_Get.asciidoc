[[get-doc]]
=== document 검색

Elasticsearch에서 document를((("documents", "retrieving"))) 가져오기 위해서는, 
같은 `_index`, `_type`, `_id`을 사용해야 한다. 그러나 HTTP method는 ((("HTTP methods", "GET"))) `GET`으로 바꾸어야 한다.

[source,sh]
--------------------------------------------------
GET /website/blog/123?pretty
--------------------------------------------------

// SENSE: 030_Data/15_Get_document.json

응답은 이제는 익숙한 metadata 요소에, 추가로 ((("_source field", sortas="source field")))`_source` field를 포함하고 있다. _source field는 
색인 시에 Elasticsearch에 전송했던, 원본 JSON document를 포함하고 있다:

[source,js]
--------------------------------------------------
{
  "_index" :   "website",
  "_type" :    "blog",
  "_id" :      "123",
  "_version" : 1,
  "found" :    true,
  "_source" :  {
      "title": "My first blog entry",
      "text":  "Just trying this out...",
      "date":  "2014/01/01"
  }
}
--------------------------------------------------

[NOTE]
====
위의 예처럼, 어떤 요청이든 query string 매개변수에 `pretty`를 더하면,((("query strings", "adding pretty"))) Elasticsearch는 JSON 응답을 좀 더 읽기 쉽게 만들어, 
_보기 좋게 출력_((("pretty-printing JSON response"))) 한다. 그러나 `_source` field는 보기 좋게 출력되지 않는다.
대신에 입력한 JSON 문자열을 정확히 똑같이 돌려준다.
====

+GET+ 요청에 대한 응답은 `{"found": true}`를 포함하고 있다. 이것은 document가 발견되었다는 것을 확인해 준다. 
((("documents", "requesting non-existent document")))만약 존재하지 않는 document를 요청하면, `found`가 false로 설정된 JSON 응답이 나올 것이다.

또한 HTTP 응답 code는 `200 OK`가 아닌, `404 Not Found`가 될 것이다. curl에 `–i` 매개변수를((("curl command", "-i argument"))) 전달하면, 응답 header를 볼 수 있다:

[source,sh]
--------------------------------------------------
curl -i -XGET http://localhost:9200/website/blog/124?pretty
--------------------------------------------------
// SENSE: 030_Data/15_Get_document.json

응답은 아래와 같다:

[source,js]
--------------------------------------------------
HTTP/1.1 404 Not Found
Content-Type: application/json; charset=UTF-8
Content-Length: 83

{
  "_index" : "website",
  "_type" :  "blog",
  "_id" :    "124",
  "found" :  false
}
--------------------------------------------------

==== document의 일부만 검색

기본적으로, `GET` 요청은((("documents", "retrieving part of"))) `_source` field에 저장되어 있는, 전체 document를 반환한다. 
그런데, `title` field에만 관심이 있다면, `_source` 매개변수를 사용하여, 개별 field를((("fields", "returning individual document fields")))((("_source field", sortas="source field"))) 요청할 수 있다. 
다중 field는 ‘,’(comma)로 구분된 목록으로 지정할 수 있다:

[source,sh]
--------------------------------------------------
GET /website/blog/123?_source=title,text
--------------------------------------------------
// SENSE: 030_Data/15_Get_document.json

이제 `_source` field는 요청한 field만을 포함하고 `date` field는 걸러졌다:

[source,js]
--------------------------------------------------
{
  "_index" :   "website",
  "_type" :    "blog",
  "_id" :      "123",
  "_version" : 1,
  "exists" :   true,
  "_source" : {
      "title": "My first blog entry" ,
      "text":  "Just trying this out..."
  }
}
--------------------------------------------------

metadata 없이 `_source` field만 원한다면, 마지막에 `_source`만을 쓰면 된다:

[source,sh]
--------------------------------------------------
GET /website/blog/123/_source
--------------------------------------------------
// SENSE: 030_Data/15_Get_document.json

아래와 같이 반환한다:

[source,js]
--------------------------------------------------
{
   "title": "My first blog entry",
   "text":  "Just trying this out...",
   "date":  "2014/01/01"
}
--------------------------------------------------
